{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { asideMenuCssClasses, checkBreakpoint, validBreakpoints } from './Shared';\nimport toggleClasses from './Shared/toggle-classes';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  display: PropTypes.string,\n  fixed: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  offCanvas: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nvar defaultProps = {\n  tag: 'aside',\n  display: '',\n  fixed: false,\n  isOpen: false,\n  offCanvas: true\n};\n\nvar AppAside = function (_Component) {\n  _inherits(AppAside, _Component);\n\n  function AppAside(props) {\n    _classCallCheck(this, AppAside);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.isFixed = _this.isFixed.bind(_this);\n    _this.isOffCanvas = _this.isOffCanvas.bind(_this);\n    _this.displayBreakpoint = _this.displayBreakpoint.bind(_this);\n    return _this;\n  }\n\n  AppAside.prototype.componentDidMount = function componentDidMount() {\n    this.isFixed(this.props.fixed);\n    this.isOffCanvas(this.props.offCanvas);\n    this.displayBreakpoint(this.props.display);\n  };\n\n  AppAside.prototype.isFixed = function isFixed(fixed) {\n    if (fixed) {\n      document.body.classList.add('aside-menu-fixed');\n    }\n  };\n\n  AppAside.prototype.isOffCanvas = function isOffCanvas(offCanvas) {\n    if (offCanvas) {\n      document.body.classList.add('aside-menu-off-canvas');\n    }\n  };\n\n  AppAside.prototype.displayBreakpoint = function displayBreakpoint(display) {\n    if (display && checkBreakpoint(display, validBreakpoints)) {\n      var cssClass = 'aside-menu-' + display + '-show';\n      toggleClasses(cssClass, asideMenuCssClasses, true);\n    }\n  };\n\n  AppAside.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        children = _props.children,\n        Tag = _props.tag,\n        attributes = _objectWithoutProperties(_props, ['className', 'children', 'tag']);\n\n    delete attributes.display;\n    delete attributes.fixed;\n    delete attributes.offCanvas;\n    delete attributes.isOpen;\n    var classes = classNames(className, 'aside-menu');\n    return React.createElement(Tag, _extends({}, attributes, {\n      className: classes\n    }), children);\n  };\n\n  return AppAside;\n}(Component);\n\nAppAside.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppAside.defaultProps = defaultProps;\nexport default AppAside;","map":null,"metadata":{},"sourceType":"module"}