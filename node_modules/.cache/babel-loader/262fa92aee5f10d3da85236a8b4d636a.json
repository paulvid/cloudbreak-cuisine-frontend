{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nvar propTypes = {\n  color: PropTypes.string,\n  label: PropTypes.bool,\n  outline: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.oneOf(['', 'alt'])]),\n  size: PropTypes.oneOf(['', 'lg', 'sm']),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  defaultValue: PropTypes.any,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  form: PropTypes.any,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  onChange: PropTypes.func,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  variant: PropTypes.oneOf(['', '3d', 'pill']),\n  className: PropTypes.string,\n  dataOn: PropTypes.string,\n  dataOff: PropTypes.string\n};\nvar defaultProps = {\n  color: 'secondary',\n  label: false,\n  outline: false,\n  size: '',\n  checked: false,\n  defaultChecked: false,\n  disabled: false,\n  required: false,\n  type: 'checkbox',\n  variant: '',\n  dataOn: 'On',\n  dataOff: 'Off'\n};\n\nvar AppSwitch = function (_Component) {\n  _inherits(AppSwitch, _Component);\n\n  function AppSwitch(props) {\n    _classCallCheck(this, AppSwitch);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.onChange = _this.onChange.bind(_this);\n    _this.state = {\n      checked: _this.props.defaultChecked || _this.props.checked,\n      selected: []\n    };\n    return _this;\n  }\n\n  AppSwitch.prototype.onChange = function onChange(event) {\n    var target = event.target;\n    this.setState({\n      checked: target.checked\n    });\n\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  };\n\n  AppSwitch.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.checked !== prevProps.checked) {\n      this.setState({\n        checked: this.props.checked\n      });\n    }\n  };\n\n  AppSwitch.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        disabled = _props.disabled,\n        color = _props.color,\n        name = _props.name,\n        label = _props.label,\n        outline = _props.outline,\n        size = _props.size,\n        required = _props.required,\n        type = _props.type,\n        value = _props.value,\n        dataOn = _props.dataOn,\n        dataOff = _props.dataOff,\n        variant = _props.variant,\n        attributes = _objectWithoutProperties(_props, ['className', 'disabled', 'color', 'name', 'label', 'outline', 'size', 'required', 'type', 'value', 'dataOn', 'dataOff', 'variant']);\n\n    delete attributes.checked;\n    delete attributes.defaultChecked;\n    delete attributes.onChange;\n    var classes = classNames(className, 'switch', label ? 'switch-label' : false, size ? 'switch-' + size : false, variant ? 'switch-' + variant : false, 'switch' + (outline ? '-outline' : '') + '-' + color + (outline === 'alt' ? '-alt' : ''), 'form-check-label');\n    var inputClasses = classNames('switch-input', 'form-check-input');\n    var sliderClasses = classNames('switch-slider');\n    return React.createElement('label', {\n      className: classes\n    }, React.createElement('input', _extends({\n      type: type,\n      className: inputClasses,\n      onChange: this.onChange,\n      checked: this.state.checked,\n      name: name,\n      required: required,\n      disabled: disabled,\n      value: value\n    }, attributes)), React.createElement('span', {\n      className: sliderClasses,\n      'data-checked': dataOn,\n      'data-unchecked': dataOff\n    }));\n  };\n\n  return AppSwitch;\n}(Component);\n\nAppSwitch.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSwitch.defaultProps = defaultProps;\nexport default AppSwitch;","map":null,"metadata":{},"sourceType":"module"}